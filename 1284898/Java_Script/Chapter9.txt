<body>
    <p id="paragraph"></p>
    <p id="para1"></p>
    <img id="downLoadImg" />
    <img id="imgDownload" />


<script>
      console.log(" Updating the Page During a Loop");
      function getToWork() {
        const element = document.getElementById("paragraph");
        const start = Date.now();
        let counter = 0;
        element.innerText = "Processing started";
        while (Date.now() - start < 5000) {
          counter += 1;
          element.innerText = `working on generating number${counter}`;
        }
        element.innerText = "process completed";
      }
      window.onload = getToWork;
</script>


<script>
        function doWorkAside() {
          const Element1 = document.getElementById("para1");
          const startTime = Date.now();
          let counter = 0;
          Element1.innerText = "Processing Started";
          const doParticularTask = () => {
            if (Date.now() - startTime < 2000) {
              counter += 1;
              Element1.innerText = `${counter}`;
              setTimeout(doParticularTask, 0);
            } else {
              Element1.innerText = "Processing Completed";
            }
          };
          doParticularTask();
        }
        window.onload = doWorkAside;
</script>

<script>
      console.log("Using a Function That Returns a Promise");
      const promise = fetch(
        "https://upload.wikimedia.org/wikipedia/commons/b/b2/Eagle_nebula_pillars.jpg"
      );
      promise.then(function successfulResponse(res) {
        console.log(`HTTP Status is : ${res.status}`);
      });
      promise.catch(function catchError(err) {
        console.error(`found the error ${err}`);
      });

      promise.finally(function finalResponse() {
        console.log("all the work has been finished successfully");
      });
</script>



 <script>
      console.log("chaining multiple promises with catch error");

      fetch(
        "https://upload.wikimedia.org/wikipedia/commons/b/b2/Eagle_nebula_pillars.jpg"
      )
        .then((res) => {
          if (!res.ok) {
            throw new Error(
              `there is a error and HTTP status is ${res.status}`
            );
          } else {
            return res.blob;
          }
        })
        .then((blob) => {
          const img = document.getElementById("downLoadImg");
          img.src = URL.createObjectURL(blob);
        })
        .catch((err) => {
          console.log("An error has occured");
        });
</script>


<script>
      console.log(
        " Promisifying an Asynchronous Function That Uses a Callback"
      );
      function findFactorial(number, successfulCallback, errorCallback) {
        if (number < 0) {
          errorCallback("Number must be non-negative");
          return;
        }

        let result = 1;
        for (let i = 1; i <= number; i++) {
          result *= i;
        }

        successfulCallback(result);
      }

      function factorialWithPromises(number) {
        return new Promise((resolve, reject) => {
          findFactorial(
            number,
            (result) => {
              resolve(result);
            },
            (error) => {
              reject(error);
            }
          );
        });
      }

      factorialWithPromises(8).then((result) => {
        console.log(`8! = ${result}`);
      });
      factorialWithPromises("sornali")
        .then((result) => {
          console.log(`8! = ${result}`);
        })
        .catch((error) => {
          console.log(error);
        });
</script>

<script>
      console.log(" Executing Multiple Promises Concurrently ");
      function singlePromiseWithWait() {
        return new Promise((resolve, reject) => {
          const waitFor = Math.round(Math.random() * 5000);
          setTimeout(() => {
            console.log(`Result appear ${waitFor} in milisecond`);
            resolve(waitFor);
          }, waitFor);
        });
      }
      const time1 = singlePromiseWithWait();
      const time2 = singlePromiseWithWait();
      const time3 = singlePromiseWithWait();
      const allTime = [time1, time2, time3];
      Promise.all(allTime).then((value) => {
        console.log(`All work done in ${value}`);
      });

      const time4 = singlePromiseWithWait();
      const time5 = singlePromiseWithWait();
      const time6 = singlePromiseWithWait();
      const Time = [time4, time5, time6];

      Promise.any(Time).then((values) => {
        console.log(`Any work done in ${values}`);
      });
      const time7 = singlePromiseWithWait();
      const time8 = singlePromiseWithWait();
      const time9 = singlePromiseWithWait();
      const firstinrace = [time7, time8, time9];
      Promise.race(firstinrace).then((values) => {
        console.log(`first work done in ${values}`);
      });
</script>


<script>
      console.log("Waiting for a Promise to Finish with Await and Async");
      async function getDataFromWeb() {
        const url =
          "https://upload.wikimedia.org/wikipedia/commons/b/b2/Eagle_nebula_pillars.jpg";
        const res = await fetch(url);
        console.log(`status is ${res.status}`);
      }
      getDataFromWeb().then(() => {
        console.log("the work completed Asynchronously");
      });
</script>


<script>
      async function imgDownloadAndShow() {
        const url =
          "https://upload.wikimedia.org/wikipedia/commons/b/b2/Eagle_nebula_pillars.jpg";
        const res = await fetch(url);
        if (res.ok) {
          const blob = await res.blob();
          const img = document.getElementById("imgDownload");
          img.src = URL.createObjectURL(blob);
        }
      }
      imgDownloadAndShow()
        .then((res) => {
          console.log("Img Download finished");
        })
        .catch((err) => {
          console.error(`Error occured`);
        });
</script>

<script>
      console.log("Creating an Asynchronous Generator Function");
      async function* findNumberRandomly(max) {
        while (true) {
          yield Math.floor(Math.random() * Math.floor(max) + 1);
        }
      }
      const generateMaxNum = findNumberRandomly(10);
      for (let i = 0; i < 20; i++) {
        const num = generateMaxNum.next();
        console.log("get the numbers");
        num.then((result) => console.log(`the result ${result.value}`));
      }

      async function searchForNumbers(search, providor) {
        for await (const value of providor) {
          console.log(value);
          if (value === search) return;
        }
      }
      const numberFound = findNumberRandomly(100);
      searchForNumbers(37, numberFound).then((result) => {
        console.log("found the number");
      });
</script>
<body>
